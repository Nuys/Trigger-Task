public class CaseTriggerHandler extends TriggerHandler {
    protected override void beforeInsert(){
        preventCreateCase((List<Case>)Trigger.new);
    }
    protected override void beforeUpdate(){
        preventCreateCase((List<Case>)Trigger.new);
    }
    
    private static void preventCreateCase(List<Case> newList){
        Integer count = 0;
        Set<String> setSubject = new Set<String>();
        Set<Id> idSet = new Set<Id>();
        for(Case case_i:newList){
            setSubject.add(case_i.Subject);
            idSet.add(case_i.AccountId);
        }
        if(setSubject.size() > 0){
            Map<String, Case> mapForListNew = new Map<String,Case>();
            for(Case case_i:newList){
                mapForListNew.put(case_i.Subject,case_i);
                if(mapForListNew.containsKey(case_i.Subject)){
                    count++;
                }
            }
            List<Case> caseList = [SELECT Subject, AccountId FROM Case WHERE Subject in :setSubject AND AccountId =: idSet ];
            Map<String ,Case> mapSubject = new Map<String,Case>();
            for(Case case_i: caseList){
                mapSubject.put(case_i.Subject,case_i);
            }
            List<Case> newListCaseToAddError = new List<Case>();  
            if(count>1){
                for(Integer i = 1 ;i<newList.size();i++){
                    newListCaseToAddError.add(newList.get(i));
                }
                for(Case case_i:newListCaseToAddError){
                    
                    case_i.addError('You can`t create a case with the same subject');   
                }
                newList.get(0);
            }
            else {
                for(Case case_i:newList){
                    if(mapSubject.containsKey(case_i.Subject)){
                        case_i.addError('You can`t create a case');
                    }
                }
            }
        }
    }
}
